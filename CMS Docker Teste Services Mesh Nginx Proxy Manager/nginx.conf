
events {
    worker_connections  1024; # maximo de conexões simultâneas por workers # 65535
}

http {

    upstream wrk-web-blue {
        # https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/
        # https://faun.pub/how-to-configure-nginx-as-a-load-balancer-docker-flask-nginx-de95766b749b
        # least_conn; # O uso do parâmetro least_conn permite que uma requisição seja enviada ao servidor/container com o menor número de conexões ativas
        # ip_hash; # O servidor para o qual uma solicitação é enviada é determinado a partir do endereço IP do cliente. Nesse caso, os três primeiros octetos do endereço IPv4 ou todo o endereço IPv6 são usados ​​para calcular o valor de hash. O método garante que as solicitações do mesmo endereço cheguem ao mesmo servidor, a menos que ele não esteja disponível.
        # hash $request_uri consistent; # Hash Genérico – O servidor para o qual uma solicitação é enviada é determinado a partir de uma chave definida pelo usuário, que pode ser uma string de texto, variável ou uma combinação. Por exemplo, a chave pode ser um endereço IP e uma porta de origem emparelhados ou um URI como neste
        # least_time header; # Menor tempo (somente NGINX Plus) – Para cada solicitação, o NGINX Plus seleciona o servidor com a menor latência média e o menor número de conexões ativas, onde a menor latência média é calculada com base em qual dos seguintes parâmetros da least_timediretiva está incluído: header– Tempo para receber o primeiro byte do servidor / last_byte– Tempo para receber a resposta completa do servidor / last_byte inflight– Tempo para receber a resposta completa do servidor, levando em consideração solicitações incompletas
        # random two least_time=last_byte; # Aleatório – Cada solicitação será passada para um servidor selecionado aleatoriamente. Se o twoparâmetro for especificado, primeiro, o NGINX seleciona aleatoriamente dois servidores levando em consideração os pesos do servidor e, em seguida, escolhe um desses servidores usando o método especificado: least_conn– O menor número de conexões ativas // least_time=header(NGINX Plus) – O menor tempo médio para receber o cabeçalho de resposta do servidor ( $upstream_header_time) // least_time=last_byte(NGINX Plus) – O menor tempo médio para receber a resposta completa do servidor ( $upstream_response_time)
        # queue 100 timeout=70; # Limitando o número de conexões
        # server site1-loadbalance1 max_fails=3  fail_timeout=30s;
        least_conn; # prioriza o servidor com menor numero de conexões ativas
        server wrk-web-blue-01:80 weight=2; # servidor com maior peso, aguenta mais requisições
        server wrk-web-blue-02:80;
    }

    upstream wrk-web-green {
        ip_hash; # enviar a requisição de um cliente sempre para o msm servidor
        server wrk-web-green-01:80 weight=2; # servidor com maior peso, aguenta mais requisições
        server wrk-web-green-02:80;
    }

    server {

        listen  80;
        server_name  labs.com.br; #localhost;

        location / {
            proxy_pass http://wrk-web-blue/;
			# add_header Proxy 'CMS - TNB - NGINX';
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header X-Forwarded-Proto $scheme;
            # proxy_redirect off;
            # client_max_body_size 5M;
        }

        location /blue {
            proxy_pass http://wrk-web-blue/;
        }

        location /green {
            proxy_pass http://wrk-web-green/;
        }

    }

    server {

        listen  80;
        server_name  blue.labs.com.br;

        location / {
            proxy_pass http://wrk-web-blue/;
        }

    }

    server {

        listen  80;
        server_name  green.labs.com.br;

        location / {
            proxy_pass http://wrk-web-green/;
        }

    }

}

version: '3.7'

networks:
  kong-net:
    name: kong-net
    driver: bridge
    #external: true

configs:
  elastic_config:
    file: ./elasticsearch/config/elasticsearch.yml
  logstash_config:
    file: ./logstash/config/logstash.yml
  logstash_pipeline:
    file: ./logstash/pipeline/logstash.conf
  kibana_config:
    file: ./kibana/config/kibana.yml

volumes:
  kong_data: {}

services:

  #######################################
  # Kong database migration bootstrap
  #######################################
  kong-migrations:
    container_name: kong-migrations  
    image: "kong:2.3.2-alpine"
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db 
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ERROR_LOG: /dev/stderr
    networks:
      - kong-net
    links:
      - db
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  #######################################
  # Kong database migration up & finish
  #######################################
  kong-migrations-up:
    container_name: kong-migrations-up
    image: "kong:2.3.2-alpine"
    command: kong migrations up && kong migrations finish
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ERROR_LOG: /dev/stderr
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  #######################################
  # Postgres: The database used by Kong
  #######################################
  db:
    container_name: db
    image: postgres:9.5 
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      KONG_PROXY_ERROR_LOG: /dev/stderr
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - ./data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    container_name: kong
    image: "kong:2.3.2-alpine"  
    user: "kong" 
    depends_on:  
      db:
        condition: service_healthy
    environment:
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db 
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
    networks:
      - kong-net
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  #######################################
  # Konga database prepare
  #######################################
  konga-prepare:
    container_name: konga-prepare
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresql://kong:kong@db:5432/konga_db"
    networks:
      - kong-net
    restart: on-failure
    depends_on:
      - db # kong-database

  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    container_name: konga
    image: pantsel/konga:latest
    restart: always
    networks:
      - kong-net
    environment:
      DB_ADAPTER: postgres
      NODE_ENV: production
      DB_HOST: db
      DB_USER: kong
      DB_PASSWORD: kong
      TOKEN_SECRET: ahfdjgjgf79JKLFHJKh978953kgdfjkl
      DB_DATABASE: konga_db 
    depends_on:
      - db 
    ports:
      - "1337:1337"

  #######################################
  # Services: A1
  #######################################
  servicea:
    container_name: servicea
    image: wesleywillians/kong-service:latest
    environment:
      PORT: ":8081"
      CONTENT: "<h1>Service A</h1>"
    networks:
      - kong-net

  #######################################
  # Services: A2
  #######################################
  servicea2:
    container_name: servicea2
    image: wesleywillians/kong-service:latest
    environment:
      PORT: ":7071"
      CONTENT: "<h1>Service A2</h1>"
    networks:
      - kong-net

  #######################################
  # Services: B
  #######################################
  serviceb:
    container_name: serviceb
    image: wesleywillians/kong-service:latest
    environment:
      PORT: ":8082"
      CONTENT: "<h1>Service b</h1>"
    networks:
      - kong-net

  #######################################
  # Services: C
  #######################################
  servicec:
    container_name: servicec
    image: wesleywillians/kong-service:latest
    environment:
      PORT: ":8083"
      CONTENT: "<h1>Service C</h1>"
    networks:
      - kong-net

  #######################################
  # Services: Go1
  #######################################
  servicego:
    container_name: servicego
    image: wesleywillians/kong-service:latest
    environment:
      PORT: ":3000"
      CONTENT: "<h1>Service Cliente</h1>"
    networks:
      - kong-net

  #######################################
  # Services: Go2
  #######################################
  servicego2:
    container_name: servicego2
    image: wesleywillians/kong-service:latest
    environment:
      PORT: ":3002"
      CONTENT: "<h1>Service Cliente 2</h1>"
    networks:
      - kong-net

  #######################################
  # Services: Go3
  #######################################
  servicego3:
    container_name: servicego3
    image: wesleywillians/kong-service:latest
    environment:
      PORT: ":3003"
      CONTENT: "<h1>Service Cliente 3</h1>"
    networks:
      - kong-net

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    ports:
      - "9200:9200"
      - "9300:9300"
    configs:
      - source: elastic_config
        target: /usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      discovery.type: single-node
    networks:
      - kong-net
    deploy:
      mode: replicated
      replicas: 1

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:7.6.2
    ports:
      - "5000:5000"
      - "9600:9600"
    configs:
      - source: logstash_config
        target: /usr/share/logstash/config/logstash.yml
      - source: logstash_pipeline
        target: /usr/share/logstash/pipeline/logstash.conf
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - kong-net
    deploy:
      mode: replicated
      replicas: 1

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.6.2
    ports:
      - "5601:5601"
    configs:
      - source: kibana_config
        target: /usr/share/kibana/config/kibana.yml
    networks:
      - kong-net
    deploy:
      mode: replicated
      replicas: 1
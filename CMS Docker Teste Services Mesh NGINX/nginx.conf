
events {
    worker_connections  1024; # maximo de conexões simultâneas por workers # 65535
}

http {

    upstream wrk-web-blue {
        # https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/
        # https://faun.pub/how-to-configure-nginx-as-a-load-balancer-docker-flask-nginx-de95766b749b
        # least_conn; # O uso do parâmetro least_conn permite que uma requisição seja enviada ao servidor/container com o menor número de conexões ativas
        # ip_hash; # O servidor para o qual uma solicitação é enviada é determinado a partir do endereço IP do cliente. Nesse caso, os três primeiros octetos do endereço IPv4 ou todo o endereço IPv6 são usados ​​para calcular o valor de hash. O método garante que as solicitações do mesmo endereço cheguem ao mesmo servidor, a menos que ele não esteja disponível.
        # hash $request_uri consistent; # Hash Genérico – O servidor para o qual uma solicitação é enviada é determinado a partir de uma chave definida pelo usuário, que pode ser uma string de texto, variável ou uma combinação. Por exemplo, a chave pode ser um endereço IP e uma porta de origem emparelhados ou um URI como neste
        # least_time header; # Menor tempo (somente NGINX Plus) – Para cada solicitação, o NGINX Plus seleciona o servidor com a menor latência média e o menor número de conexões ativas, onde a menor latência média é calculada com base em qual dos seguintes parâmetros da least_timediretiva está incluído: header– Tempo para receber o primeiro byte do servidor / last_byte– Tempo para receber a resposta completa do servidor / last_byte inflight– Tempo para receber a resposta completa do servidor, levando em consideração solicitações incompletas
        # random two least_time=last_byte; # Aleatório – Cada solicitação será passada para um servidor selecionado aleatoriamente. Se o twoparâmetro for especificado, primeiro, o NGINX seleciona aleatoriamente dois servidores levando em consideração os pesos do servidor e, em seguida, escolhe um desses servidores usando o método especificado: least_conn– O menor número de conexões ativas // least_time=header(NGINX Plus) – O menor tempo médio para receber o cabeçalho de resposta do servidor ( $upstream_header_time) // least_time=last_byte(NGINX Plus) – O menor tempo médio para receber a resposta completa do servidor ( $upstream_response_time)
        # queue 100 timeout=70; # Limitando o número de conexões
        # server site1-loadbalance1 max_fails=3  fail_timeout=30s;
        least_conn; # prioriza o servidor com menor numero de conexões ativas
        server wrk-web-blue-01:80 weight=2; # servidor com maior peso, aguenta mais requisições
        server wrk-web-blue-02:80;
    }

    upstream wrk-web-green {
        ip_hash; # enviar a requisição de um cliente sempre para o msm servidor
        server wrk-web-green-01:80 weight=2; # servidor com maior peso, aguenta mais requisições
        server wrk-web-green-02:80;
    }

    server {

        listen  80;
        server_name  labs.com.br; #localhost;

        location / {
            proxy_pass http://wrk-web-blue/;
			# add_header Proxy 'CMS - TNB - NGINX';
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header X-Forwarded-Proto $scheme;
            # proxy_redirect off;
            # client_max_body_size 5M;
        }

        location /blue {
            proxy_pass http://wrk-web-blue/;
        }

        location /green {
            proxy_pass http://wrk-web-green/;
        }

    }

    server {

        listen  80;
        server_name  blue.labs.com.br;

        location / {
            proxy_pass http://wrk-web-blue/;
        }

    }

    server {

        listen  80;
        server_name  green.labs.com.br;

        location / {
            proxy_pass http://wrk-web-green/;
        }

    }

}







/*

#user  nobody;
worker_processes  auto;
worker_rlimit_nofile 65535;

pid        /run/nginx.pid;

    
    error_log  /var/log/nginx/error.log;
    
events {
	multi_accept on;
	worker_connections 65535;
}



http {
    include       mime.types;
    default_type  application/octet-stream;
    #client_body_in_file_only on; $request_body_file
    log_format  main  escape=json '{'
        ' "time": "$time_local",'
        ' "status": "$status",'                
        ' "http_x_real_ip": "$http_x_real_ip",'
        ' "realip_remote_addr": "$http_cf_connecting_ip",'
        ' "proxy_add_x_forwarded_for": "$proxy_add_x_forwarded_for",'
        ' "http_x_forwarded_for": "$http_x_forwarded_for",'        
        ' "remote_addr": "$remote_addr",'        
        ' "remote_user": "$remote_user",'
        ' "host": "$host",'
        ' "http_name":"$http_name",'
        ' "cookie_name":"$cookie_name",'
        ' "query_string":"$query_string",'
        ' "tcpinfo_rtt":"$tcpinfo_rtt",'

        ' "bytes_sent": $bytes_sent,'
        ' "body_bytes_sent": $body_bytes_sent,'
        ' "request_length": $request_length,'

        ' "http_x_assets_host": "$http_x_assets_host",'


        ' "request_body": "$request_body",'
        

        ' "request_time": $request_time,'
        ' "request": "$request", '        
        ' "http_header":"$http_header",'
        ' "http_referer": "$http_referer",'
        ' "http_user_agent": "$http_user_agent",'
        ' "remote_user": "$remote_user",'
        ' "server_name": "$server_name",'
        ' "http_range":"$http_range",'
        ' "connection":"$connection",'
        ' "connection_requests":"$connection_requests",'
        ' "upstream_addr":          "$upstream_addr",'
        ' "upstream_status":        "$upstream_status",'
        ' "upstream_header_time":   "$upstream_header_time",'
        ' "upstream_cache_status":  "$upstream_cache_status",'
        ' "upstream_connect_time":  "$upstream_connect_time",'
        ' "upstream_cookie_name":   "$upstream_cookie_name",'
        ' "upstream_response_time": "$upstream_response_time",'
        ' "msec": $msec'
        ' } ';

    
    access_log  /var/log/nginx/access.log  main;
    
    sendfile on;
    keepalive_timeout   29; # Adjust to the lowest possible value that makes sense for your use case.
    client_body_timeout 10; 
    client_header_timeout 10; 
    send_timeout 10;

    charset utf-8;
	tcp_nopush on;
	tcp_nodelay on;
	server_tokens off;
	log_not_found on;
	types_hash_max_size 2048;
	client_max_body_size 20M;

    #proxy_cache_path /tmp/cache keys_zone=mycache:30m levels=1:2 inactive=180s;
                                   
    #map $request_method $purge_method {
    #    PURGE 1;
    #    default 0;
    #}
                                   
    gzip                  on;
    gzip_proxied         any;
    gzip_comp_level        6;
    gzip_min_length      256;
    gzip_vary             on;
    gzip_disable         “MSIE [1-6]\.(?!.*SV1)”;

      gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        # application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/xml
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;

    
    proxy_redirect          off;
    proxy_set_header        Host                $host;
    proxy_set_header        X-Real-IP           $http_x_forwarded_for;
    proxy_set_header        X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_connect_timeout   600;
    proxy_send_timeout      600;
    proxy_read_timeout      600;
    proxy_buffers           32 8k;    


    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }


    include /etc/nginx/conf.d/default.conf;



}

server { 
        
        listen 80;

        proxy_buffer_size          128k;
        proxy_buffers              4 256k;
        proxy_busy_buffers_size    256k;

        location / {
            proxy_pass         http://jornada:80;
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection keep-alive;
            proxy_set_header   Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }


        #ACME-challenge
        location ^~ /.well-known/acme-challenge/ {
	        root /cert;
        }
        
    }


*/
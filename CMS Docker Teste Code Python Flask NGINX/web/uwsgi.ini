[uwsgi]
; module = wsgi:app
# chdir=/code/app
# chdir2=/code/app/templates
module = app:create_app()
strict = true
master = true
processes = 5                      ; Maximum number of workers allowed
enable-threads = true
threads = 2
# gevent = 2
http = 0.0.0.0:5001
die-on-term = true
http-keepalive = true
vacuum = true 
single-interpreter = true
need-app = true
disable-logging = true
buffer-size = 65535
# lazy = true
# protocol=http
log-4xx = true
log-5xx = true
max-requests = 50000                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
reload-on-rss = 2048                 ; Restart workers after this much resident memory
worker-reload-mercy = 60             ; How long to wait before forcefully killing workers
# cheaper-algo = busyness              
# cheaper = 8                          ; Minimum number of workers allowed
# cheaper-initial = 16                 ; Workers created at startup
# cheaper-overload = 1                 ; Length of a cycle in seconds
# cheaper-step = 16                    ; How many workers to spawn at a time
# cheaper-busyness-multiplier = 30     ; How many cycles to wait before killing workers
# cheaper-busyness-min = 20            ; Below this threshold, kill workers (if stable for multiplier cycles)
# cheaper-busyness-max = 70            ; Above this threshold, spawn new workers
# cheaper-busyness-backlog-alert = 16  ; Spawn emergency workers if more than this many requests are waiting in the queue
# cheaper-busyness-backlog-step = 2    ; How many emergegency workers to create if there are too many requests in the queue
# harakiri = 60                        ; Forcefully kill workers after 60 seconds
# py-call-osafterfork = true
# auto-procname = true

